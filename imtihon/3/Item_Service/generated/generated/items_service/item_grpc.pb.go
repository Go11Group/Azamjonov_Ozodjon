// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: item/item.proto

package items_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemsServiceClient is the client API for ItemsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsServiceClient interface {
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error)
	SearchItemsAndFilter(ctx context.Context, in *SearchItemsAndFilterRequest, opts ...grpc.CallOption) (*SearchItemsAndFilterResponse, error)
	CreateChangeSwaps(ctx context.Context, in *CreateSwapRequest, opts ...grpc.CallOption) (*CreateSwapResponse, error)
	UpdateAcceptSwap(ctx context.Context, in *UpdateSwapRequest, opts ...grpc.CallOption) (*UpdateSwapResponse, error)
	UpdateRejectSwap(ctx context.Context, in *UpdateRejectSwapRequest, opts ...grpc.CallOption) (*UpdateRejectSwapResponse, error)
	GetChangedSwap(ctx context.Context, in *GetChangeSwapRequest, opts ...grpc.CallOption) (*GetChangeSwapResponse, error)
	CreateAddRecyclingCenter(ctx context.Context, in *CreateRecyclingCenterRequest, opts ...grpc.CallOption) (*CreateRecyclingCenterResponse, error)
	SearchRecyclingCenter(ctx context.Context, in *SearchRecyclingCenterRequest, opts ...grpc.CallOption) (*SearchRecyclingCenterResponse, error)
	CreateRecyclingSubmissions(ctx context.Context, in *CreateRecyclingSubmissionsRequest, opts ...grpc.CallOption) (*CreateRecyclingSubmissionsResponse, error)
	CreateRating(ctx context.Context, in *CreateRatingRequest, opts ...grpc.CallOption) (*CreateRatingResponse, error)
	GetUserRatings(ctx context.Context, in *GetRatingRequest, opts ...grpc.CallOption) (*GetRatingResponse, error)
	CreateEcoChallenge(ctx context.Context, in *CreateEcoChallengeRequest, opts ...grpc.CallOption) (*CreateEcoChallengeResponse, error)
	CreateParticipateChallenge(ctx context.Context, in *CreateParticipateChallengeRequest, opts ...grpc.CallOption) (*CreateParticipateChallengeResponse, error)
	UpdateEcoChallengeResult(ctx context.Context, in *UpdateEcoChallengeResultRequest, opts ...grpc.CallOption) (*UpdateEcoChallengeResultResponse, error)
	CreateEcoTip(ctx context.Context, in *CreateEcoTipRequest, opts ...grpc.CallOption) (*CreateEcoTipResponse, error)
	GetAddEcoTips(ctx context.Context, in *GetAddEcoTipsRequest, opts ...grpc.CallOption) (*GetAddEcoTipsResponse, error)
	CreateItemCategoryManage(ctx context.Context, in *CreateItemCategoryManageRequest, opts ...grpc.CallOption) (*CreateItemCategoryManageResponse, error)
	GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error)
	GetMonitoringUserActivity(ctx context.Context, in *GetMonitoringUserActivityRequest, opts ...grpc.CallOption) (*GetMonitoringUserActivityResponse, error)
	CreateItemCategory(ctx context.Context, in *CreateItemCategoryManageRequest, opts ...grpc.CallOption) (*CreateItemCategoryManageResponse, error)
}

type itemsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsServiceClient(cc grpc.ClientConnInterface) ItemsServiceClient {
	return &itemsServiceClient{cc}
}

func (c *itemsServiceClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*CreateItemResponse, error) {
	out := new(CreateItemResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/UpdateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error) {
	out := new(GetAllItemsResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/GetAllItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) SearchItemsAndFilter(ctx context.Context, in *SearchItemsAndFilterRequest, opts ...grpc.CallOption) (*SearchItemsAndFilterResponse, error) {
	out := new(SearchItemsAndFilterResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/SearchItemsAndFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) CreateChangeSwaps(ctx context.Context, in *CreateSwapRequest, opts ...grpc.CallOption) (*CreateSwapResponse, error) {
	out := new(CreateSwapResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/CreateChangeSwaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) UpdateAcceptSwap(ctx context.Context, in *UpdateSwapRequest, opts ...grpc.CallOption) (*UpdateSwapResponse, error) {
	out := new(UpdateSwapResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/UpdateAcceptSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) UpdateRejectSwap(ctx context.Context, in *UpdateRejectSwapRequest, opts ...grpc.CallOption) (*UpdateRejectSwapResponse, error) {
	out := new(UpdateRejectSwapResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/UpdateRejectSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) GetChangedSwap(ctx context.Context, in *GetChangeSwapRequest, opts ...grpc.CallOption) (*GetChangeSwapResponse, error) {
	out := new(GetChangeSwapResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/GetChangedSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) CreateAddRecyclingCenter(ctx context.Context, in *CreateRecyclingCenterRequest, opts ...grpc.CallOption) (*CreateRecyclingCenterResponse, error) {
	out := new(CreateRecyclingCenterResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/CreateAddRecyclingCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) SearchRecyclingCenter(ctx context.Context, in *SearchRecyclingCenterRequest, opts ...grpc.CallOption) (*SearchRecyclingCenterResponse, error) {
	out := new(SearchRecyclingCenterResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/SearchRecyclingCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) CreateRecyclingSubmissions(ctx context.Context, in *CreateRecyclingSubmissionsRequest, opts ...grpc.CallOption) (*CreateRecyclingSubmissionsResponse, error) {
	out := new(CreateRecyclingSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/CreateRecyclingSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) CreateRating(ctx context.Context, in *CreateRatingRequest, opts ...grpc.CallOption) (*CreateRatingResponse, error) {
	out := new(CreateRatingResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/CreateRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) GetUserRatings(ctx context.Context, in *GetRatingRequest, opts ...grpc.CallOption) (*GetRatingResponse, error) {
	out := new(GetRatingResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/GetUserRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) CreateEcoChallenge(ctx context.Context, in *CreateEcoChallengeRequest, opts ...grpc.CallOption) (*CreateEcoChallengeResponse, error) {
	out := new(CreateEcoChallengeResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/CreateEcoChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) CreateParticipateChallenge(ctx context.Context, in *CreateParticipateChallengeRequest, opts ...grpc.CallOption) (*CreateParticipateChallengeResponse, error) {
	out := new(CreateParticipateChallengeResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/CreateParticipateChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) UpdateEcoChallengeResult(ctx context.Context, in *UpdateEcoChallengeResultRequest, opts ...grpc.CallOption) (*UpdateEcoChallengeResultResponse, error) {
	out := new(UpdateEcoChallengeResultResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/UpdateEcoChallengeResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) CreateEcoTip(ctx context.Context, in *CreateEcoTipRequest, opts ...grpc.CallOption) (*CreateEcoTipResponse, error) {
	out := new(CreateEcoTipResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/CreateEcoTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) GetAddEcoTips(ctx context.Context, in *GetAddEcoTipsRequest, opts ...grpc.CallOption) (*GetAddEcoTipsResponse, error) {
	out := new(GetAddEcoTipsResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/GetAddEcoTips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) CreateItemCategoryManage(ctx context.Context, in *CreateItemCategoryManageRequest, opts ...grpc.CallOption) (*CreateItemCategoryManageResponse, error) {
	out := new(CreateItemCategoryManageResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/CreateItemCategoryManage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error) {
	out := new(GetStatisticsResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/GetStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) GetMonitoringUserActivity(ctx context.Context, in *GetMonitoringUserActivityRequest, opts ...grpc.CallOption) (*GetMonitoringUserActivityResponse, error) {
	out := new(GetMonitoringUserActivityResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/GetMonitoringUserActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsServiceClient) CreateItemCategory(ctx context.Context, in *CreateItemCategoryManageRequest, opts ...grpc.CallOption) (*CreateItemCategoryManageResponse, error) {
	out := new(CreateItemCategoryManageResponse)
	err := c.cc.Invoke(ctx, "/items_service.ItemsService/CreateItemCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemsServiceServer is the server API for ItemsService service.
// All implementations must embed UnimplementedItemsServiceServer
// for forward compatibility
type ItemsServiceServer interface {
	CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error)
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error)
	SearchItemsAndFilter(context.Context, *SearchItemsAndFilterRequest) (*SearchItemsAndFilterResponse, error)
	CreateChangeSwaps(context.Context, *CreateSwapRequest) (*CreateSwapResponse, error)
	UpdateAcceptSwap(context.Context, *UpdateSwapRequest) (*UpdateSwapResponse, error)
	UpdateRejectSwap(context.Context, *UpdateRejectSwapRequest) (*UpdateRejectSwapResponse, error)
	GetChangedSwap(context.Context, *GetChangeSwapRequest) (*GetChangeSwapResponse, error)
	CreateAddRecyclingCenter(context.Context, *CreateRecyclingCenterRequest) (*CreateRecyclingCenterResponse, error)
	SearchRecyclingCenter(context.Context, *SearchRecyclingCenterRequest) (*SearchRecyclingCenterResponse, error)
	CreateRecyclingSubmissions(context.Context, *CreateRecyclingSubmissionsRequest) (*CreateRecyclingSubmissionsResponse, error)
	CreateRating(context.Context, *CreateRatingRequest) (*CreateRatingResponse, error)
	GetUserRatings(context.Context, *GetRatingRequest) (*GetRatingResponse, error)
	CreateEcoChallenge(context.Context, *CreateEcoChallengeRequest) (*CreateEcoChallengeResponse, error)
	CreateParticipateChallenge(context.Context, *CreateParticipateChallengeRequest) (*CreateParticipateChallengeResponse, error)
	UpdateEcoChallengeResult(context.Context, *UpdateEcoChallengeResultRequest) (*UpdateEcoChallengeResultResponse, error)
	CreateEcoTip(context.Context, *CreateEcoTipRequest) (*CreateEcoTipResponse, error)
	GetAddEcoTips(context.Context, *GetAddEcoTipsRequest) (*GetAddEcoTipsResponse, error)
	CreateItemCategoryManage(context.Context, *CreateItemCategoryManageRequest) (*CreateItemCategoryManageResponse, error)
	GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error)
	GetMonitoringUserActivity(context.Context, *GetMonitoringUserActivityRequest) (*GetMonitoringUserActivityResponse, error)
	CreateItemCategory(context.Context, *CreateItemCategoryManageRequest) (*CreateItemCategoryManageResponse, error)
	mustEmbedUnimplementedItemsServiceServer()
}

// UnimplementedItemsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemsServiceServer struct {
}

func (UnimplementedItemsServiceServer) CreateItem(context.Context, *CreateItemRequest) (*CreateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedItemsServiceServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemsServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedItemsServiceServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemsServiceServer) GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (UnimplementedItemsServiceServer) SearchItemsAndFilter(context.Context, *SearchItemsAndFilterRequest) (*SearchItemsAndFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItemsAndFilter not implemented")
}
func (UnimplementedItemsServiceServer) CreateChangeSwaps(context.Context, *CreateSwapRequest) (*CreateSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChangeSwaps not implemented")
}
func (UnimplementedItemsServiceServer) UpdateAcceptSwap(context.Context, *UpdateSwapRequest) (*UpdateSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAcceptSwap not implemented")
}
func (UnimplementedItemsServiceServer) UpdateRejectSwap(context.Context, *UpdateRejectSwapRequest) (*UpdateRejectSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRejectSwap not implemented")
}
func (UnimplementedItemsServiceServer) GetChangedSwap(context.Context, *GetChangeSwapRequest) (*GetChangeSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangedSwap not implemented")
}
func (UnimplementedItemsServiceServer) CreateAddRecyclingCenter(context.Context, *CreateRecyclingCenterRequest) (*CreateRecyclingCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddRecyclingCenter not implemented")
}
func (UnimplementedItemsServiceServer) SearchRecyclingCenter(context.Context, *SearchRecyclingCenterRequest) (*SearchRecyclingCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecyclingCenter not implemented")
}
func (UnimplementedItemsServiceServer) CreateRecyclingSubmissions(context.Context, *CreateRecyclingSubmissionsRequest) (*CreateRecyclingSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecyclingSubmissions not implemented")
}
func (UnimplementedItemsServiceServer) CreateRating(context.Context, *CreateRatingRequest) (*CreateRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRating not implemented")
}
func (UnimplementedItemsServiceServer) GetUserRatings(context.Context, *GetRatingRequest) (*GetRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRatings not implemented")
}
func (UnimplementedItemsServiceServer) CreateEcoChallenge(context.Context, *CreateEcoChallengeRequest) (*CreateEcoChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEcoChallenge not implemented")
}
func (UnimplementedItemsServiceServer) CreateParticipateChallenge(context.Context, *CreateParticipateChallengeRequest) (*CreateParticipateChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParticipateChallenge not implemented")
}
func (UnimplementedItemsServiceServer) UpdateEcoChallengeResult(context.Context, *UpdateEcoChallengeResultRequest) (*UpdateEcoChallengeResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEcoChallengeResult not implemented")
}
func (UnimplementedItemsServiceServer) CreateEcoTip(context.Context, *CreateEcoTipRequest) (*CreateEcoTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEcoTip not implemented")
}
func (UnimplementedItemsServiceServer) GetAddEcoTips(context.Context, *GetAddEcoTipsRequest) (*GetAddEcoTipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddEcoTips not implemented")
}
func (UnimplementedItemsServiceServer) CreateItemCategoryManage(context.Context, *CreateItemCategoryManageRequest) (*CreateItemCategoryManageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemCategoryManage not implemented")
}
func (UnimplementedItemsServiceServer) GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedItemsServiceServer) GetMonitoringUserActivity(context.Context, *GetMonitoringUserActivityRequest) (*GetMonitoringUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitoringUserActivity not implemented")
}
func (UnimplementedItemsServiceServer) CreateItemCategory(context.Context, *CreateItemCategoryManageRequest) (*CreateItemCategoryManageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemCategory not implemented")
}
func (UnimplementedItemsServiceServer) mustEmbedUnimplementedItemsServiceServer() {}

// UnsafeItemsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsServiceServer will
// result in compilation errors.
type UnsafeItemsServiceServer interface {
	mustEmbedUnimplementedItemsServiceServer()
}

func RegisterItemsServiceServer(s grpc.ServiceRegistrar, srv ItemsServiceServer) {
	s.RegisterService(&ItemsService_ServiceDesc, srv)
}

func _ItemsService_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/GetAllItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).GetAllItems(ctx, req.(*GetAllItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_SearchItemsAndFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchItemsAndFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).SearchItemsAndFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/SearchItemsAndFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).SearchItemsAndFilter(ctx, req.(*SearchItemsAndFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_CreateChangeSwaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).CreateChangeSwaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/CreateChangeSwaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).CreateChangeSwaps(ctx, req.(*CreateSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_UpdateAcceptSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).UpdateAcceptSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/UpdateAcceptSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).UpdateAcceptSwap(ctx, req.(*UpdateSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_UpdateRejectSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRejectSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).UpdateRejectSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/UpdateRejectSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).UpdateRejectSwap(ctx, req.(*UpdateRejectSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_GetChangedSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).GetChangedSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/GetChangedSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).GetChangedSwap(ctx, req.(*GetChangeSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_CreateAddRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecyclingCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).CreateAddRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/CreateAddRecyclingCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).CreateAddRecyclingCenter(ctx, req.(*CreateRecyclingCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_SearchRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRecyclingCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).SearchRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/SearchRecyclingCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).SearchRecyclingCenter(ctx, req.(*SearchRecyclingCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_CreateRecyclingSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecyclingSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).CreateRecyclingSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/CreateRecyclingSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).CreateRecyclingSubmissions(ctx, req.(*CreateRecyclingSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_CreateRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).CreateRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/CreateRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).CreateRating(ctx, req.(*CreateRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_GetUserRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).GetUserRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/GetUserRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).GetUserRatings(ctx, req.(*GetRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_CreateEcoChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEcoChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).CreateEcoChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/CreateEcoChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).CreateEcoChallenge(ctx, req.(*CreateEcoChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_CreateParticipateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParticipateChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).CreateParticipateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/CreateParticipateChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).CreateParticipateChallenge(ctx, req.(*CreateParticipateChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_UpdateEcoChallengeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEcoChallengeResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).UpdateEcoChallengeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/UpdateEcoChallengeResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).UpdateEcoChallengeResult(ctx, req.(*UpdateEcoChallengeResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_CreateEcoTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEcoTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).CreateEcoTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/CreateEcoTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).CreateEcoTip(ctx, req.(*CreateEcoTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_GetAddEcoTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddEcoTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).GetAddEcoTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/GetAddEcoTips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).GetAddEcoTips(ctx, req.(*GetAddEcoTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_CreateItemCategoryManage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemCategoryManageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).CreateItemCategoryManage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/CreateItemCategoryManage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).CreateItemCategoryManage(ctx, req.(*CreateItemCategoryManageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/GetStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).GetStatistics(ctx, req.(*GetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_GetMonitoringUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitoringUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).GetMonitoringUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/GetMonitoringUserActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).GetMonitoringUserActivity(ctx, req.(*GetMonitoringUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsService_CreateItemCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemCategoryManageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServiceServer).CreateItemCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/items_service.ItemsService/CreateItemCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServiceServer).CreateItemCategory(ctx, req.(*CreateItemCategoryManageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemsService_ServiceDesc is the grpc.ServiceDesc for ItemsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "items_service.ItemsService",
	HandlerType: (*ItemsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _ItemsService_CreateItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _ItemsService_GetItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _ItemsService_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ItemsService_DeleteItem_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _ItemsService_GetAllItems_Handler,
		},
		{
			MethodName: "SearchItemsAndFilter",
			Handler:    _ItemsService_SearchItemsAndFilter_Handler,
		},
		{
			MethodName: "CreateChangeSwaps",
			Handler:    _ItemsService_CreateChangeSwaps_Handler,
		},
		{
			MethodName: "UpdateAcceptSwap",
			Handler:    _ItemsService_UpdateAcceptSwap_Handler,
		},
		{
			MethodName: "UpdateRejectSwap",
			Handler:    _ItemsService_UpdateRejectSwap_Handler,
		},
		{
			MethodName: "GetChangedSwap",
			Handler:    _ItemsService_GetChangedSwap_Handler,
		},
		{
			MethodName: "CreateAddRecyclingCenter",
			Handler:    _ItemsService_CreateAddRecyclingCenter_Handler,
		},
		{
			MethodName: "SearchRecyclingCenter",
			Handler:    _ItemsService_SearchRecyclingCenter_Handler,
		},
		{
			MethodName: "CreateRecyclingSubmissions",
			Handler:    _ItemsService_CreateRecyclingSubmissions_Handler,
		},
		{
			MethodName: "CreateRating",
			Handler:    _ItemsService_CreateRating_Handler,
		},
		{
			MethodName: "GetUserRatings",
			Handler:    _ItemsService_GetUserRatings_Handler,
		},
		{
			MethodName: "CreateEcoChallenge",
			Handler:    _ItemsService_CreateEcoChallenge_Handler,
		},
		{
			MethodName: "CreateParticipateChallenge",
			Handler:    _ItemsService_CreateParticipateChallenge_Handler,
		},
		{
			MethodName: "UpdateEcoChallengeResult",
			Handler:    _ItemsService_UpdateEcoChallengeResult_Handler,
		},
		{
			MethodName: "CreateEcoTip",
			Handler:    _ItemsService_CreateEcoTip_Handler,
		},
		{
			MethodName: "GetAddEcoTips",
			Handler:    _ItemsService_GetAddEcoTips_Handler,
		},
		{
			MethodName: "CreateItemCategoryManage",
			Handler:    _ItemsService_CreateItemCategoryManage_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _ItemsService_GetStatistics_Handler,
		},
		{
			MethodName: "GetMonitoringUserActivity",
			Handler:    _ItemsService_GetMonitoringUserActivity_Handler,
		},
		{
			MethodName: "CreateItemCategory",
			Handler:    _ItemsService_CreateItemCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item/item.proto",
}
